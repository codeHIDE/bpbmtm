package com.bypay.action;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.bypay.common.BaseAction;
import com.bypay.dao.BlackInfoDao;
import com.bypay.dao.SubMerInfoDao;
import com.bypay.dao.SubMerTerminalDao;
import com.bypay.domain.BlackInfo;
import com.bypay.domain.SubMerInfo;
import com.bypay.domain.SubMerTerminal;
import com.bypay.service.BankCardCheckService;
import com.bypay.util.PageUtil;
import com.richerpay.core.model.CoreTransInfo;
import com.richerpay.dubbo.service.PayService;
/**
 * 黑名单ACTION
 */
public class BlackInfoAction extends BaseAction {
	private static final long serialVersionUID = 1L;
	private final static Logger logger = LoggerFactory.getLogger(BlackInfoAction.class);  
	private BlackInfo blackInfo;
	@Inject
	private BlackInfoDao blackInfoDao;
	@Inject
	private SubMerInfoDao subMerInfoDao;
	@Inject
	private SubMerTerminalDao subMerTerminalDao;
	@Inject
	private BankCardCheckService bankCardCheckService;
	private List<BlackInfo> blcakInfoList;
	private int page=1;
	private int pageSize=15;
	@Autowired
	private PayService payService;
	///////////////////////////////业务////////////////////////////////
	/**
	 * 查询所有黑名单信息
	 */
	@SuppressWarnings("unchecked")
	public void selectBlackInfoList(){
		try {
			if(blackInfo==null){
				blackInfo=new BlackInfo();
			}
			if(blackInfo.getRealName()!=null){
				blackInfo.setRealName(new String(blackInfo.getRealName().
						getBytes("ISO-8859-1"),"UTF-8"));
			}
			Map<String,Object> map = PageUtil.getPageMap(page,pageSize);
			map.put("blackInfo", blackInfo);
			int count=blackInfoDao.selectBlackInfoCount(map);
			blcakInfoList = blackInfoDao.selectBlackInfoList(map);
			JSONArray array = JSONArray.fromObject(blcakInfoList);
			JSONObject object = new JSONObject();
			object.put("Rows", array.toString());
			object.put("Total", count);
			String subMerList=object.toString();
			getResponse().getWriter().write(subMerList);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 修改指定黑名单信息的状态
	 */
	public void updateBlackInfoStatus(){
		try {
			if(blackInfo==null){//如果实体类对象中没有子商户号则结束操作
				return;
			}
			if(blackInfoDao.updateBlackInfoStatus(blackInfo))
				getResponse().getWriter().write("succ");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 添加黑名单
	 * @return
	 */
	public String insertBlackInfoList(){
		if(blackInfo!=null){
			//验证用户填写的子商户号
			SubMerInfo smi=new SubMerInfo();
			smi.setSubMerId(blackInfo.getSubMerId());
			smi=subMerInfoDao.findById(smi);
			if(smi==null){//验证未通过
				getRequest().setAttribute("black", "0");
				return "insert";
			}else{//将子商户状态改为黑名单
				if(!subMerInfoDao.updateStatus(smi)){
					getRequest().setAttribute("black", "0");
					return "insert";
				}
			}
			//验证用户填写的终端TSN
			SubMerTerminal smt=new SubMerTerminal();
			smt.setTsn(blackInfo.getTerminalId());
			smt.setSubMerId(blackInfo.getSubMerId());
			List<SubMerTerminal> smtL=subMerTerminalDao.selectSubMerTerminalAll(smt);
			if(smtL==null|| smtL.size()==0){//验证未通过
				getRequest().setAttribute("black", "3");
				return "insert";
			}else{//将查到的TSN状态改为黑名单
				for (int i = 0; i < smtL.size(); i++) {
					if(!subMerTerminalDao.updateTreminalStatus("3", smtL.get(i).getId()+"")){
						getRequest().setAttribute("black", "3");
						return "insert";
					}
				}
			}
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			blackInfo.setCreateTime(sdf.format(new Date()));//创建时间
			if(blackInfoDao.insertBlackInfo(blackInfo))
				getRequest().setAttribute("black", "1");
			else
				getRequest().setAttribute("black", "2");
		}
		return "insert";
	}
	
	/**
	 * 银行卡鉴权
	 * @Title:        checkBankCard 
	 * @Description:  
	 * @param:            
	 * @return:       void    
	 * @throws 
	 * @author        Eason Jiang
	 * @Date          2015-7-9 上午10:16:13
	 */
	public void checkBankCard(){
		String userName = getRequest().getParameter("userName");
		String idNum = getRequest().getParameter("idNum");
		String cardNo = getRequest().getParameter("cardNo");
		String cellNo = getRequest().getParameter("cellNo");
		Map<String,String> paraMap = new HashMap<String,String>();
		paraMap.put("userName", userName);
		paraMap.put("idNum", idNum);
		paraMap.put("cardNo", cardNo);
		paraMap.put("cellNo", cellNo);
		Map<String,String> resultMap = bankCardCheckService.checkBankCard(paraMap);
		String respCode = resultMap.get("respCode");
		String respMsg = resultMap.get("respMsg");
		logger.info("respCode="+respCode);
		logger.info("respMsg="+respMsg);
		try {
			getResponse().getWriter().write(respMsg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 银行卡/信用卡 验证
	 * @Title:        checkCreditCard 
	 * @Description:  
	 * @param:            
	 * @return:       void    
	 * @throws 
	 * @author        Eason Jiang
	 * @Date          2015-7-10 下午12:17:16
	 */
	public void checkCreditCard(){
		String userName = getRequest().getParameter("userName");
		String cardNo = getRequest().getParameter("cardNo");
		Boolean flag = false;
		CoreTransInfo coreTransInfo = new CoreTransInfo();
		 try{
			 coreTransInfo.setPan(cardNo);
	    	 coreTransInfo.setUserName(userName);		//姓名
	    	 coreTransInfo.setChTermId("01235801");		//终端号
	    	 coreTransInfo.setTerminalNo("01235801");
	    	 coreTransInfo.setChMerId("898220150392358");		//商户号
	    	 coreTransInfo.setMerId("898220150392358");
	    	 SimpleDateFormat sdf = new SimpleDateFormat("HHmmss");
	    	 coreTransInfo.setTrackingNo(sdf.format(new Date()));
	    	 coreTransInfo.setTransType("1001");		//银行卡
	    	 coreTransInfo.setTransSource("201");		//手刷
	    	 coreTransInfo.setMessageType("0200");		//消费
	    	 coreTransInfo.setProcessingCode("330000");
	    	 coreTransInfo.setBatchNo("000001");
	    	 coreTransInfo.setCurrencyCode("156");		//恒定156
	    	 logger.info("银行卡验证make object suc coreTransInfo="+coreTransInfo.toString());
	    	 coreTransInfo = payService.doEntrustPayVerify(coreTransInfo);
	    	 logger.info("*******doPay resp："
						+ coreTransInfo.getResponseCode());
			 if(StringUtils.isNotEmpty(coreTransInfo.getResponseCode()) && coreTransInfo.getResponseCode().equals("00")){
				 flag = true;
			 }
			 getResponse().getWriter().write(flag.toString());
		 }catch(Exception e){
			 e.printStackTrace();
		 }
	}
	
	////////////////////////////GET  SET/////////////////////////
	
	public BlackInfo getBlackInfo() {
		return blackInfo;
	}
	public BankCardCheckService getBankCardCheckService() {
		return bankCardCheckService;
	}
	public void setBankCardCheckService(BankCardCheckService bankCardCheckService) {
		this.bankCardCheckService = bankCardCheckService;
	}
	public void setBlackInfo(BlackInfo blcakInfo) {
		this.blackInfo = blcakInfo;
	}
	public BlackInfoDao getBlackInfoDao() {
		return blackInfoDao;
	}
	public void setBlackInfoDao(BlackInfoDao blcakInfoDao) {
		this.blackInfoDao = blcakInfoDao;
	}
	public List<BlackInfo> getBlcakInfoList() {
		return blcakInfoList;
	}
	public void setBlcakInfoList(List<BlackInfo> blcakInfoList) {
		this.blcakInfoList = blcakInfoList;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	public SubMerInfoDao getSubMerInfoDao() {
		return subMerInfoDao;
	}
	public void setSubMerInfoDao(SubMerInfoDao subMerInfoDao) {
		this.subMerInfoDao = subMerInfoDao;
	}
	public int getPage() {
		return page;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	public SubMerTerminalDao getSubMerTerminalDao() {
		return subMerTerminalDao;
	}
	public void setSubMerTerminalDao(SubMerTerminalDao subMerTerminalDao) {
		this.subMerTerminalDao = subMerTerminalDao;
	}
}
