package com.bypay.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.Ostermiller.util.MD5;
import com.bypay.common.BaseAction;
import com.bypay.dao.OrderFrozenDao;
import com.bypay.dao.OrderProfitDao;
import com.bypay.dao.OrderStatictisDao;
import com.bypay.dao.SubMerInfoDao;
import com.bypay.dao.SysOpLogDao;
import com.bypay.domain.OrderFrozen;
import com.bypay.domain.OrderInfo;
import com.bypay.domain.OrderProfit;
import com.bypay.domain.SubMerInfo;
import com.bypay.domain.SysManager;
import com.bypay.domain.SysOpLog;
import com.bypay.domain.TractInfo;
import com.bypay.service.OrderInfoService;
import com.bypay.service.SubMerInfoService;
import com.bypay.service.SysManagerService;
import com.bypay.service.TractInfoService;
import com.bypay.util.AddressUtil;
import com.bypay.util.DateUtil;
import com.bypay.util.ImportExcelFile;
import com.bypay.util.PageUtil;
import com.richerpay.core.model.CoreTransInfo;
import com.richerpay.dubbo.service.PayService;

public class OrderInfoAction extends BaseAction {
	private Logger logger = LoggerFactory.getLogger(OrderInfoAction.class);
	@Inject
	private SysOpLogDao sysOpLogDao;
	private OrderInfo orderInfo;
	@Inject
	private SysManagerService sysManagerService;
	@Inject
	private OrderInfoService orderInfoService;
	@Inject
	private SubMerInfoService subMerInfoService;
	@Inject
	private TractInfoService tractInfoService;
	@Inject
	private OrderStatictisDao orderStatictisDao;
	@Inject
	private SubMerInfoDao subMerInfoDao;
	@Inject
	private OrderFrozenDao orderFrozenDao;
	
	@Inject
	private OrderProfitDao orderProfitDao;
	
	private OrderProfit orderProfit;
//	@Autowired
	private PayService payService;
	
	private List<OrderInfo> orderInfoList;
	private List<OrderFrozen> orderFrozenList;
	private SysManager sysManager;
	private OrderFrozen orderFrozen;
	private String orderList;
	private OrderInfo orderDetailInfo;
	private Map totalMap;
	static ResourceBundle rb = ResourceBundle.getBundle("com/bypay/config/bmtmUtil", Locale.getDefault());
	private String orderSign;

	// 查询条件
	private String busMerId; // 商户号
	private String orderId; // 订单号
	private String merOrderId; // 商户订单号
	private String userMobile; // 手机号
	private String settleDate; // 清算时间
	private String merOrderTime; // 商户交易时间
	private String transQid; // 交易流水号
	private String transType; // 交易类型
	private String orderStatus; // 交易状态
	private String agentIdL1; // 一级代理商号
	private String agentIdL2; // 二级代理商号
	private String terminalId; // 终端号
	private String merSysId; // 机构商户号
	private String cardNo; // 卡号
	private String terminalSerialNumber; // orderInfo 终端号
	private String busType; // 业务类别
	private String shipmentStatus; // 出货状态
	private String startTime;
	private String endTime;
	private String refundStatus;//退款状态
	// 分页开始
	private int page = 1;
	private int pageSize = 15;
	/**
	 * 
	 * 冻结订单
	 */
	public void forzenSum(){
		JSONObject jsonObject = new JSONObject();
		try {
			int data = Integer.parseInt(DateUtil.getDate("HH"));
			if(data < 2){
				jsonObject.put("msg", "00:00:00 至 02:00:00 内，不可操作");
				getResponse().getWriter().write(jsonObject.toString());
				return;
			}
			String orderId = getRequest().getParameter("orderId");
			String status = getRequest().getParameter("status");
			Integer i = orderStatictisDao.selectOrderStatictisOrderId(orderId);
			if(i != 1){
				jsonObject.put("msg", "该订单未清算，无法操作");
				getResponse().getWriter().write(jsonObject.toString());
				return;
			}
			orderInfo = orderInfoService.getOrderInfo(orderId);
			SubMerInfo subMerInfo = new SubMerInfo();
			subMerInfo.setSubMerId(orderInfo.getSubMerId());
			subMerInfo.setFrozenSumMax(("2".equals(status)?"":"-")+orderInfo.getMerAmt());
			if("3".equals(status)){
				subMerInfo.setFrozenSum("-"+orderInfo.getMerAmt());
			}
			orderFrozen = new OrderFrozen();
			orderFrozen.setOrderId(orderId);
			orderFrozen.setSubMerId(orderInfo.getSubMerId());
			orderFrozen.setFrozenStatus(status);
			if("1".equals(status)){
				orderFrozen.setReturnTime(DateUtil.getDate("yyyy-MM-dd hh:mm:ss"));
			}else if("2".equals(status)){
				orderFrozen.setFrozenTime(DateUtil.getDate("yyyy-MM-dd hh:mm:ss"));
			}else if("3".equals(status)){
				OrderFrozen orderFrozen1 = orderFrozenDao.selectOrderFrozenByOrderId(orderId);
				String frozenTime = orderFrozen1.getFrozenTime();
				if(frozenTime == null){
					jsonObject.put("msg", "该订单没有冻结时间，无法扣除");
					getResponse().getWriter().write(jsonObject.toString());
					return;
				}
				String deductionTime = DateUtil.getDate("yyyy-MM-dd");
				if(frozenTime.indexOf(deductionTime) != -1){
					jsonObject.put("msg", "冻结当天不可扣除");
					getResponse().getWriter().write(jsonObject.toString());
					return;
				}
				orderFrozen.setDeductionTime(frozenTime);
			}
			if("2".equals(status)){
				OrderFrozen orderFrozen1 = orderFrozenDao.selectOrderFrozenByOrderId(orderId);
				if(orderFrozen1 == null){
					orderFrozen.setReserved1(DateUtil.getDate("yyyyMMdd"));
					orderFrozenDao.insertOrderFrozen(orderFrozen);
				}else{
					orderFrozenDao.updateOrderFrozen(orderFrozen);
				}
			}else{
				orderFrozenDao.updateOrderFrozen(orderFrozen);
			}
			subMerInfoDao.update(subMerInfo);
			jsonObject.put("msg", "操作成功");
			getResponse().getWriter().write(jsonObject.toString());
		} catch (Exception e) {
			try {
				jsonObject.put("msg", "出错，请记录出错时间并联系管理员");
				getResponse().getWriter().write(jsonObject.toString());
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
	}
	/**
	 * 
	 * 查询冻结订单
	 */
	public void selectOrderFrozen(){
		try {
			if(orderFrozen == null){
				orderFrozen = new OrderFrozen();
			}
			Map map = PageUtil.getPageMap(page,pageSize);
			map.put("orderFrozen", orderFrozen);
			orderFrozenList = orderFrozenDao.selectOrderFrozen(map);
			int count = orderFrozenDao.selectOrderFrozenCount(map);
			JSONArray array = JSONArray.fromObject(orderFrozenList);
			JSONObject object = new JSONObject();
			object.put("Rows", array.toString());
			object.put("Total", count);
			getResponse().getWriter().write(object.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 历史订单退款
	 * @throws IOException 
	 */
	public void orderRefund() throws IOException {
		String rest = "授权人ID或密码错误！";
		if(sysManager != null && null != sysManager.getLevelPwd().trim() && !"".equals(sysManager.getLevelPwd().trim())
				&& null != sysManager.getLoginName().trim() && !"".equals(sysManager.getLoginName().trim())) {
			SysManager manager = new SysManager();
			manager.setLoginName(sysManager.getLoginName());
			manager.setLevelPwd(MD5.getHashString(sysManager.getLevelPwd()));
			manager = sysManagerService.getSysManager(manager);
			if(null != manager) {				
				if(orderInfo != null && null != orderInfo.getOrderId() && !"".equals(orderInfo.getOrderId())) {
					orderInfo = orderInfoService.getOrderInfo(orderInfo.getOrderId());
					String str = orderInfoService.orderRefund(orderInfo);
					System.out.println("str" + str);
					String[] re =  str.split("\\|");
					rest = re[2];
					getResponse().getWriter().write(re[2]);//结果描述
				}
			} else {
				getResponse().getWriter().write("2");
			}
		} else {
			getResponse().getWriter().write("2");
		}
		//将退款操作记录到数据库日志
		HttpServletRequest request = ServletActionContext.getRequest();
		SysOpLog sysOpLog = new SysOpLog();
		sysOpLog.setLoginName(sysManager.getLoginName());
		sysOpLog.setOpDesc("退款操作");
		sysOpLog.setOpUrl("/orderInfo!orderRefund.ac");
		sysOpLog.setIp(AddressUtil.getIP(request));
		sysOpLog.setOpTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
		sysOpLog.setRemark(rest);
		sysOpLogDao.insertSysOpLog(sysOpLog);
	}

	/**
	 * 应用交易查询
	 */
	public void selectApplyList() {
		Map<Object, Object> maps = new HashMap<Object, Object>();
		maps.put("subMerId", busMerId);
		maps.put("orderId", orderId);
		maps.put("merOrderId", merOrderId);
		maps.put("userMobile", userMobile);
		maps.put("agentIdL1", agentIdL1);
		maps.put("agentIdL2", agentIdL2);
		maps.put("cardNo", cardNo);
		maps.put("merOrderTime", merOrderTime);
		maps.put("transType", transType);
		maps.put("terminalId", terminalSerialNumber);
		maps.put("orderStatus", orderStatus);
		maps.put("startTime", startTime);
		maps.put("endTime", endTime);
		maps.put("merSysId", merSysId);
		maps.put("busType", busType);
		totalMap = orderInfoService.selectApplyCount(maps);
		int count = Integer.parseInt(totalMap.get("count").toString());
		double sumMerAmt = Double.parseDouble(totalMap.get("sumMerAmt").toString());
		double sumTransFee = Double.parseDouble(totalMap.get("sumTransFee").toString());
		Map map = PageUtil.getPageMap(page, pageSize);
		map.putAll(maps);
		orderInfoList = orderInfoService.selectApplyList(map);
		OrderInfo info = null;
		String time;
		// 时间格式转换
		for (int i = 0; i < orderInfoList.size(); i++) {
			info = orderInfoList.get(i);
			time = info.getMerOrderTime();
			if (time != null && time.length() == 14) {
				time = time.substring(0, 4) + "-" + time.substring(4, 6) + "-"
						+ time.substring(6, 8) + " " + time.substring(8, 10)
						+ ":" + time.substring(10, 12) + ":"
						+ time.substring(12);
				info.setMerOrderTime(time);
			} else {
				continue;
			}
		}
		DecimalFormat df = new DecimalFormat("#0.00");
		
		JSONArray array = JSONArray.fromObject(orderInfoList);
		JSONObject object = new JSONObject();
		object.put("Rows", array.toString());
		object.put("Total", count);
		object.put("sumMerAmt", df.format(sumMerAmt/100));
		object.put("sumTransFee", df.format(sumTransFee/100));
		orderList = object.toString();
		System.out.println(orderList);
		try {
			getResponse().getWriter().write(orderList);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 查询当天交易信息
	 */
	public void selectOrderTheDay() {
	  Map maps = new HashMap();
      maps.put("createDate", DateUtil.getDate("yyyyMMdd"));
      maps.put("subMerId", busMerId);
      maps.put("orderId", orderId);
      maps.put("merOrderId", merOrderId);
      maps.put("userMobile", userMobile);
      maps.put("agentIdL1", agentIdL1);
      maps.put("agentIdL2", agentIdL2);
      maps.put("merOrderTime", merOrderTime);
      maps.put("transType", transType);
      maps.put("orderStatus", orderStatus);
      maps.put("merSysId", merSysId);
      maps.put("terminalId", terminalSerialNumber);
      maps.put("cardNo", cardNo);
      maps.put("transMerId", this.getParameterForString("transMerId"));
      totalMap = orderInfoService.selectOrderTheDateCount(maps);
      int count = Integer.parseInt(totalMap.get("count").toString());
      double sumMerAmt = 0;
      if(null != totalMap.get("sumMerAmt")) {
          sumMerAmt = Double.parseDouble(totalMap.get("sumMerAmt").toString());
      }
      double sumTransFee = 0;
      if(null != totalMap.get("sumTransFee")) {
          sumTransFee = Double.parseDouble(totalMap.get("sumTransFee").toString());
      }
      Map map = PageUtil.getPageMap(page, pageSize);
      map.putAll(maps);
      
      orderInfoList = orderInfoService.selectOrderTheDate(map);
      OrderInfo info = null;
      String time;
      // 格式转换
      for (int i = 0; i < orderInfoList.size(); i++) {
          info = orderInfoList.get(i);
          time = info.getMerOrderTime();
          if (time != null && time.length() == 14) {
              time = time.substring(0, 4) + "-" + time.substring(4, 6) + "-"
                      + time.substring(6, 8) + " " + time.substring(8, 10)
                      + ":" + time.substring(10, 12) + ":"
                      + time.substring(12);
              info.setMerOrderTime(time);
          } else {
              continue;
          }
      }
      DecimalFormat df = new DecimalFormat("#0.00");
      JSONArray array = JSONArray.fromObject(orderInfoList);
      JSONObject object = new JSONObject();
      object.put("Rows", array.toString());
      object.put("Total", count);
      object.put("sumMerAmt", df.format(sumMerAmt/100));
      object.put("sumTransFee", df.format(sumTransFee/100));
      orderList = object.toString();
      System.out.println(orderList);
      try {
          getResponse().getWriter().write(orderList);
      } catch (IOException e) {
          e.printStackTrace();
      }
	}

	/**
	 * 
	 * @Title:        selectPayOrder 
	 * @Description:  代付交易查询
	 * @param:            
	 * @return:       void    
	 * @throws 
	 * @author        Eason Jiang
	 * @Date          2015-6-29 下午3:36:01
	 */
	public void selectPayOrder() {
	  Map maps = new HashMap();
      maps.put("createDate", DateUtil.getDate("yyyyMMdd"));
      maps.put("subMerId", busMerId);
      maps.put("orderId", orderId);
      maps.put("merOrderId", merOrderId);
      maps.put("userMobile", userMobile);
      maps.put("agentIdL1", agentIdL1);
      maps.put("agentIdL2", agentIdL2);
      maps.put("merOrderTime", merOrderTime);
      maps.put("transType", transType);
      maps.put("orderStatus", orderStatus);
      maps.put("merSysId", merSysId);
      maps.put("terminalId", terminalSerialNumber);
      maps.put("cardNo", cardNo);
      maps.put("transMerId", this.getParameterForString("transMerId"));
      maps.put("orderRateType", "10");	//代付交易 10
      totalMap = orderInfoService.selectOrderTheDateCountRate(maps);
      int count = Integer.parseInt(totalMap.get("count").toString());
      double sumMerAmt = 0;
      if(null != totalMap.get("sumMerAmt")) {
          sumMerAmt = Double.parseDouble(totalMap.get("sumMerAmt").toString());
      }
      double sumTransFee = 0;
      if(null != totalMap.get("sumTransFee")) {
          sumTransFee = Double.parseDouble(totalMap.get("sumTransFee").toString());
      }
      Map map = PageUtil.getPageMap(page, pageSize);
      map.putAll(maps);
      orderInfoList = orderInfoService.selectOrderTheDateRate(map);
      OrderInfo info = null;
      String time;
      // 格式转换
      for (int i = 0; i < orderInfoList.size(); i++) {
          info = orderInfoList.get(i);
          time = info.getMerOrderTime();
          if (time != null && time.length() == 14) {
              time = time.substring(0, 4) + "-" + time.substring(4, 6) + "-"
                      + time.substring(6, 8) + " " + time.substring(8, 10)
                      + ":" + time.substring(10, 12) + ":"
                      + time.substring(12);
              info.setMerOrderTime(time);
          } else {
              continue;
          }
      }
      DecimalFormat df = new DecimalFormat("#0.00");
      JSONArray array = JSONArray.fromObject(orderInfoList);
      JSONObject object = new JSONObject();
      object.put("Rows", array.toString());
      object.put("Total", count);
      object.put("sumMerAmt", df.format(sumMerAmt/100));
      object.put("sumTransFee", df.format(sumTransFee/100));
      orderList = object.toString();
      System.out.println(orderList);
      try {
          getResponse().getWriter().write(orderList);
      } catch (IOException e) {
          e.printStackTrace();
      }
	}
	
	/**
	 * ORDER详情
	 * 
	 * @return
	 */
	public String selectOrderDetail() {
		Map map = new HashMap();
		map.put("orderId", orderId);
		orderDetailInfo = orderInfoService.selectOrderDetail(map);
		orderProfit = orderProfitDao.selectOrderProfitByOrderId(orderId);
		orderDetailInfo.setOrderProfit(orderProfit);
		orderFrozen = orderFrozenDao.selectOrderFrozenByOrderId(orderId);
		if(null != orderDetailInfo) {
			String cardNo = orderDetailInfo.getCardNo();
			if(null != cardNo && !"".equals(cardNo)) {
				String str1 = cardNo.substring(0, 6);
				String str2 = cardNo.substring(cardNo.length()-4, cardNo.length());
				cardNo = str1 + "******" + str2;
			}
			orderDetailInfo.setCardNo(cardNo);
			
//			//检查并拼取图片地址
			String str = rb.getString("upload-path");
			str += orderDetailInfo.getMerSysId() + "/" + orderDetailInfo.getSubMerId();
			File root = new File(str);
			 if(root .exists() && root .isDirectory()){ 
				 File files [] = root.listFiles();
				 if(files!=null){
					for(int i=0;i<files.length;i++){
						if(files[i].getName()!=null&&!"".equals(files[i].getName())&&
								files[i].getName().indexOf("orderSign-"+orderDetailInfo.getMerOrderId())!=-1){
							orderSign = str + "/" + files[i].getName();
						}
					}
				 }
		     } 
		}
		return "selectOrderInfoDetail";
	}
	/**
	 * 签名图片
	 * @throws IOException 
	 */
	public void getImage() throws IOException {
		System.out.println("读取签名照路经："+orderSign);
		String str = orderSign;
		System.out.println(str);
		File file = new File(str);
		FileInputStream fie = new FileInputStream(file);
		byte[] b = new byte[fie.available()];
		fie.read(b);
		OutputStream outputStream = getResponse().getOutputStream();
		outputStream.write(b);
		outputStream.close();
	}
	/**
	 * 
	 * @Description:标记异常订单 
	 * @Auther: ljl
	 * @Date: 2014-6-10 下午4:55:48
	 */
    public void markOrderException() {
        String orderId = this.getParameterForString("orderId");
        Boolean flag = Boolean.FALSE;
        if(StringUtils.isNotEmpty(orderId)){
          flag = orderInfoService.markOrderException(orderId);
        } 
        try {
          getResponse().getWriter().write(flag.toString());
        } catch (IOException e) {
          e.printStackTrace();
        }
    }
    /**
     * 
     * @Title:        payOrder 
     * @Description:  代付交易
     * @param:            
     * @return:       void    
     * @throws 
     * @author        Eason Jiang
     * @Date          2015-6-29 下午4:39:10
     */
    //TODO
    public void payOrder(){
    	 String orderId = this.getParameterForString("orderId");
    	 CoreTransInfo coreTransInfo = new CoreTransInfo();
//    	 Boolean flag = Boolean.FALSE;
    	 String flag = "3";
    	   /*0.代付订单成功
    	   1.代付订单失败,已冲正!
    	   2.代付订单失败,冲正失败!
    	   3.已经代付过
    	   */
    	 //需要同步
    	 logger.info("进入代付交易 orderId="+orderId);
    synchronized (orderId) {
    	 OrderInfo orderInfo = orderInfoService.getOrderInfo(orderId);
    	 //判断是否已经代付
    	 if(orderInfo.getSettleStatus()==1){
    		 flag = "3";
    		 try {
				getResponse().getWriter().write(flag.toString());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		 return;
    	 }
    	 try{
	    	 SubMerInfo subMerInfo = subMerInfoService.getSubMerInfoById(orderInfo.getSubMerId());
	    	 coreTransInfo.setPan(subMerInfo.getSettAccountNo());
	    	 coreTransInfo.setIdNumber(subMerInfo.getLegalIdcard().substring(subMerInfo.getLegalIdcard().length()-6));
	    	 coreTransInfo.setUserName(subMerInfo.getLegalPerson());		//姓名
	    	 coreTransInfo.setTransType("1001");		//银行卡
	    	 coreTransInfo.setTransSource("201");		//手刷
	    	 coreTransInfo.setMessageType("0200");		//消费
	    	 coreTransInfo.setProcessingCode("290000");
	    	 coreTransInfo.setTrackingNo(orderInfo.getVoucherNo());//交易流水
	    	 coreTransInfo.setBatchNo("000001");
	    	 coreTransInfo.setCurrencyCode("156");		//恒定156
	    	 TractInfo tractInfo = tractInfoService.selectTractByMerId(orderInfo.getTransMerId());
//	    	 BigDecimal rate = new BigDecimal(tractInfo.getCreditRateCost()).divide(new BigDecimal(100));		//费率 除以100 百分比
//	    	 BigDecimal fee = new BigDecimal(tractInfo.getLowestCost());			//最低金额 分为单位
//	    	 BigDecimal tradeFee;
//	    	 if((new BigDecimal(orderInfo.getMerAmt()).multiply(rate)).compareTo(fee)>0){
//	    		 //如果费率大于最低金额	手续费为 (金额*费率)
//	    		 tradeFee = new BigDecimal(orderInfo.getMerAmt()).multiply(rate).setScale(0);
//	    	 }else{
//	    		 tradeFee = fee;
//	    	 }
//	    	 String tradeMoney = (new BigDecimal(orderInfo.getMerAmt()).subtract(tradeFee)).toString();
	    	 //交易金额为原交易金额减去代付手续费4元001803  142937
	    	 coreTransInfo.setAmount(orderInfo.getPayAmt());		//代付金额已经在消费时算好
	    	 coreTransInfo.setChTermId(tractInfo.getPayTerId());		//终端号
	    	 coreTransInfo.setTerminalNo(orderInfo.getTerminalId());
	    	 coreTransInfo.setChMerId(tractInfo.getPayMerId());		//商户号
	    	 coreTransInfo.setMerId(orderInfo.getSubMerId());		
	    	 
	    	 logger.info("make object suc coreTransInfo="+coreTransInfo.toString());
	    	// 瑞银自己的通道
			 coreTransInfo = payService.doEntrustPay(coreTransInfo);
			 logger.info("*******doPay resp："
						+ coreTransInfo.getResponseCode());
    	 }catch(Exception e){
    		 e.printStackTrace();
    	 }
			 if(StringUtils.isNotEmpty(coreTransInfo.getResponseCode()) && coreTransInfo.getResponseCode().equals("00")){
				 orderInfoService.updateOrderSettle(orderId);
				 //代付成功
				 flag = "0";
			 }else if(StringUtils.isNotEmpty(coreTransInfo.getResponseCode()) && coreTransInfo.getResponseCode().equals("94")){
				//已经代付过了
				 flag = "3";
			 }else{
				 //发起冲正交易
				 coreTransInfo.setMessageType("0400");		//冲正交易
				 coreTransInfo.setCardSeriNo("001");
				 coreTransInfo.setServiceEntryModeCode("051");
				 coreTransInfo.setProcessingCode("000000");
				 coreTransInfo.setResponseCode("06");
				 coreTransInfo.setPan(orderInfo.getFullCardNo());
				 coreTransInfo.setChTermId(orderInfo.getTransTerId());		//终端号
		    	 coreTransInfo.setTerminalNo(orderInfo.getTerminalId());
		    	 coreTransInfo.setChMerId(orderInfo.getTransMerId());		//商户号
		    	 coreTransInfo.setMerId(orderInfo.getSubMerId());	
		    	 coreTransInfo.setAmount(orderInfo.getMerAmt());		//原交易金额
				 coreTransInfo = payService.doPayReverse(coreTransInfo);
				 logger.info("*******doPay resp："
							+ coreTransInfo.getResponseCode());
				 if(StringUtils.isNotEmpty(coreTransInfo.getResponseCode()) && coreTransInfo.getResponseCode().equals("00")){
					 orderInfoService.updateOrderSettle(orderId);
					 flag="1"; 
					 //冲正成功
					 orderInfo.setRefundStatus("3");	//冲正成功
					 orderInfoService.updateOrderSettle(orderId);
					 orderInfoService.updateOrder(orderInfo);
				 }else{	//冲正失败
					 flag="2";
					 orderInfo.setRefundStatus("5");	//冲正失败
					 orderInfoService.updateOrderSettle(orderId);
					 orderInfoService.updateOrder(orderInfo);
				 }
			 }try{
				 getResponse().getWriter().write(flag.toString());
			 }catch(Exception e){
				 e.printStackTrace();
			 }
    	 }
    }
	/**
	 * 查询历史交易信息
	 */
	public void selecrOrderHistory() {
	  Map maps = new HashMap();
      maps.put("createDate", DateUtil.getDate("yyyyMMdd"));
      maps.put("subMerId", busMerId);
      maps.put("orderId", orderId);
      maps.put("merOrderId", merOrderId);
      maps.put("userMobile", userMobile);
      maps.put("agentIdL1", agentIdL1);
      maps.put("agentIdL2", agentIdL2);
      maps.put("merOrderTime", merOrderTime);
      maps.put("transType", transType);
      maps.put("orderStatus", orderStatus);
      maps.put("startTime", startTime);
      maps.put("endTime", endTime);
      maps.put("merSysId", merSysId);
      maps.put("cardNo", cardNo);
      maps.put("refundStatus", refundStatus);
//      String settleDates=settleDate.replaceAll("-", "");
//      System.out.println(settleDate);
      maps.put("settleDate", settleDate.replace("-", ""));
      maps.put("transMerId", this.getParameterForString("transMerId"));
      totalMap = orderInfoService.selectOrderHistoryCount(maps);
      int count = Integer.parseInt(totalMap.get("count").toString());
      double sumMerAmt = 0;
      if(null != totalMap.get("sumMerAmt")) {
          sumMerAmt = Double.parseDouble(totalMap.get("sumMerAmt").toString());
      }
      double sumTransFee = 0;
      if(null != totalMap.get("sumTransFee")) {
          sumTransFee = Double.parseDouble(totalMap.get("sumTransFee").toString());
      }
      Map map = PageUtil.getPageMap(page, pageSize);
      map.putAll(maps);
      orderInfoList = orderInfoService.selecrOrderHistoryList(map);
      OrderInfo info = null;
      String time;
      // 时间格式转换
      for (int i = 0; i < orderInfoList.size(); i++) {
          info = orderInfoList.get(i);
          time = info.getMerOrderTime();
          if (time != null && time.length() == 14) {
              time = time.substring(0, 4) + "-" + time.substring(4, 6) + "-"
                      + time.substring(6, 8) + " " + time.substring(8, 10)
                      + ":" + time.substring(10, 12) + ":"
                      + time.substring(12);
              info.setMerOrderTime(time);
          } else {
              continue;
          }
      }
      DecimalFormat df = new DecimalFormat("#0.00");
      JSONArray array = JSONArray.fromObject(orderInfoList);
      JSONObject object = new JSONObject();
      object.put("Rows", array.toString());
      object.put("Total", count);
      object.put("sumMerAmt", df.format(sumMerAmt/100));
      object.put("sumTransFee", df.format(sumTransFee/100));
      orderList = object.toString();
      System.out.println(orderList);
      try {
          getResponse().getWriter().write(orderList);
      } catch (IOException e) {
          e.printStackTrace();
      }

	}

	/**
	 * 应用交易报表下载
	 */
	public void downloadAppayExcel() {
		Map maps = new HashMap();
		maps.put("busMerId", busMerId);
		maps.put("orderId", orderId);
		maps.put("merOrderId", merOrderId);
		maps.put("userMobile", userMobile);
		maps.put("agentIdL1", agentIdL1);
		maps.put("agentIdL2", agentIdL2);
		maps.put("cardNo", cardNo);
		maps.put("merOrderTime", merOrderTime);
		maps.put("transType", transType);
		maps.put("orderStatus", orderStatus);
		maps.put("startTime", startTime);
		maps.put("endTime", endTime);
		maps.put("merSysId", merSysId);
		maps.put("busType", busType);
		maps.put("shipmentStatus", shipmentStatus);
		
		HttpServletResponse response = getResponse();
		response.reset();//清除缓存
		
		totalMap = orderInfoService.selectOrderHistoryCount(maps);
		int count = 0;
		if(null != totalMap && null != totalMap.get("count") && !"".equals(totalMap.get("count")))
			count = Integer.parseInt(totalMap.get("count").toString());
		
		if (count > 2000) {
			try {
				response.setHeader("Content-type", "text/html;charset=UTF-8");
				response.getWriter().write("<script>alert('弹出，超2000');window.close()</script>");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return;
		}
		Map map = PageUtil.getPageMap(1, count);
		map.putAll(maps);
		orderInfoList = orderInfoService.selectApplyList(map);
		//设置下载类型
		response.setContentType("application/x-download");
		String sheetName = "应用交易";//文件名
		
		Map<String, String> mapfile = new LinkedHashMap<String, String>();
		mapfile.put("orderId", "订单号");
		mapfile.put("subMerId", "商户号");
		mapfile.put("shortName", "商户简称");
		mapfile.put("merOrderId", "商户订单号");
		mapfile.put("merOrderTime", "商户订单时间");
		mapfile.put("merAmt", "交易金额");
		mapfile.put("transTypes", "交易类型");
		mapfile.put("orderStatuss", "交易状态");
		mapfile.put("respDesc", "返回码描述");
		mapfile.put("cardNo", "卡号");
		mapfile.put("cardTypes", "卡类型");
		try {
			response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(sheetName, "UTF-8") + ".xls");
			ImportExcelFile.ImportExcel(orderInfoList, response.getOutputStream(), mapfile, sheetName, null);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	/**
	 * 历史查询报表下载
	 */
	public void download_excel_new() {
		Map maps = new HashMap();
		maps.put("busMerId", busMerId);
		maps.put("orderId", orderId);
		maps.put("merOrderId", merOrderId);
		maps.put("userMobile", userMobile);
		maps.put("agentIdL1", agentIdL1);
		maps.put("agentIdL2", agentIdL2);
		maps.put("merOrderTime", merOrderTime);
		maps.put("transType", transType);
		maps.put("orderStatus", orderStatus);
		maps.put("startTime", startTime);
		maps.put("endTime", endTime);
		maps.put("merSysId", merSysId);
		maps.put("cardNo", cardNo);
		
		HttpServletResponse response = getResponse();
		response.setHeader("Content-type", "text/html;charset=UTF-8");
		response.reset();//清除缓存
		totalMap = orderInfoService.selectOrderHistoryCount(maps);
		int count = 0;
		if(null != totalMap && null != totalMap.get("count") && !"".equals(totalMap.get("count")))	
			count = Integer.parseInt(totalMap.get("count").toString());
		if(count > 30000) {
			try {
				this.renderText("<script>alert('失败,下载记录大于30000行');window.close()</script>");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return;
		}
		Map map = PageUtil.getPageMap(1, count);
		map.putAll(maps);
		orderInfoList = orderInfoService.selecrOrderHistoryList(map);
//		DecimalFormat df = new DecimalFormat("#0.00");
//		long sumMerAmt = 0;
		if(null != orderInfoList && orderInfoList.size() > 0) {
			for(int i = 0; i < orderInfoList.size(); i++) {
				OrderInfo info = orderInfoList.get(i);
//				long merAmts = Long.parseLong(info.getMerAmt());
//				System.out.println(merAmts);
//				sumMerAmt = sumMerAmt + merAmts;
//				System.out.println("--:" + sumMerAmt);
//				if(null != orderInfoList.get(i).getSubMerTerminal()) {
//					
//				}
				double merAmt = Double.parseDouble(info.getMerAmt())/100;
				orderInfoList.get(i).setMerAmt(merAmt+"");
			}
		}
		//设置下载类型
		response.setContentType("application/x-download");
		String sheetName = "历史交易";//文件名
		//设置导出字段  其中map中的key必须与实体类中的字段一致，不区分大小写
		Map<String, String> mapfile = new LinkedHashMap<String, String>();
		mapfile.put("merOrderTime", "日期");
		mapfile.put("merOrderTime", "时间");
		mapfile.put("subMerId", "商户号");
		mapfile.put("merSysId", "代理商号");
		mapfile.put("merOrderId", "交易号");
		mapfile.put("merAmt", "交易金额");
		mapfile.put("transTypes", "业务类型");
		mapfile.put("", "交易类型");
		mapfile.put("orderStatus", "交易状态");
		mapfile.put("orderStatuss", "状态描述");
		mapfile.put("issueBankName", "银行");
		mapfile.put("fullCardNo", "卡号");
		mapfile.put("cardTypes", "卡类型");
		mapfile.put("orderRateTypes", "手续费类型");
		mapfile.put("osfeeRate", "手续费率");
		mapfile.put("ostransFee", "总手续费");
		mapfile.put("merRate", "代理商费率");
		mapfile.put("merProfit", "代理分润");
		mapfile.put("terminalId", "终端号");
		mapfile.put("terminalTypes", "终端机型");
		mapfile.put("tsn", "设备序列号");
		/**
		mapfile.put("orderId", "订单号");
		mapfile.put("shortName", "商户简称");
		mapfile.put("respDesc", "返回码描述");
		**/
		
		
		//合计
//		Map mapAmountTo = new LinkedHashMap();
//		mapAmountTo.put("总交易金额:", df.format((double)sumMerAmt/100));
		//设置下载文件名
		try {
			response.setHeader("Content-Disposition", "attachment;filename="
					+ URLEncoder.encode(sheetName, "UTF-8") + ".xls");
			ImportExcelFile.ImportExcel(orderInfoList, response.getOutputStream(), mapfile, sheetName, null);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 查询所有转账订单信息
	 */
	public void selectTransfer() {
		Map maps = new HashMap();
		maps.put("busMerId", busMerId);
		maps.put("orderId", orderId);
		maps.put("merOrderId", merOrderId);
		maps.put("agentIdL1", agentIdL1);
		maps.put("agentIdL2", agentIdL2);
		maps.put("terminalId", terminalId);
		maps.put("createTime", merOrderTime);
		maps.put("orderStatus", orderStatus);
		maps.put("cardNo", cardNo);
		totalMap = orderInfoService.selectTransferCount(maps);
		int count = Integer.parseInt(totalMap.get("count").toString());
		double sumMerAmt = Double.parseDouble(totalMap.get("sumMerAmt").toString());
		double sumTransFee = Double.parseDouble(totalMap.get("sumTransFee").toString());
		Map map = PageUtil.getPageMap(page, pageSize);
		map.putAll(maps);
		orderInfoList = orderInfoService.selectTransfer(map);
		OrderInfo info = null;
		String time;
		// 时间格式转换
		for (int i = 0; i < orderInfoList.size(); i++) {
			info = orderInfoList.get(i);
			time = info.getMerOrderTime();
			if (time != null && time.length() == 14) {
				time = time.substring(0, 4) + "-" + time.substring(4, 6) + "-"
						+ time.substring(6, 8) + " " + time.substring(8, 10)
						+ ":" + time.substring(10, 12) + ":"
						+ time.substring(12);
				info.setMerOrderTime(time);
			} else {
				continue;
			}
		}
		DecimalFormat df = new DecimalFormat("#0.00");
		
		JSONArray array = JSONArray.fromObject(orderInfoList);
		JSONObject object = new JSONObject();
		object.put("Rows", array.toString());
		object.put("Total", count);
		object.put("sumMerAmt", df.format(sumMerAmt/100));
		object.put("sumTransFee", df.format(sumTransFee/100));
		orderList = object.toString();
		System.out.println(orderList);
		try {
			getResponse().getWriter().write(orderList);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 转账交易导出
	 */
	public void download_excel_news() {
		Map maps = new HashMap();
		maps.put("busMerId", busMerId);
		maps.put("orderId", orderId);
		maps.put("merOrderId", merOrderId);
		maps.put("agentIdL1", agentIdL1);
		maps.put("agentIdL2", agentIdL2);
		maps.put("terminalId", terminalId);
		maps.put("createTime", merOrderTime);
		maps.put("orderStatus", orderStatus);
		maps.put("cardNo", cardNo);
		
		String[] columNames = { "订单号", "商户号", "商户简称", "商户订单号", "商户订单时间",
				"通道商户号", "交易金额", "交易状态" };
		
		HttpServletResponse response = getResponse();
		response.reset();//清除缓存
		totalMap = orderInfoService.selectTransferCount(maps);
		int count = 0;
		if(null != totalMap && null != totalMap.get("count") && !"".equals(totalMap.get("count")))	
			count = Integer.parseInt(totalMap.get("count").toString());
		if (count > 2000) {
			try {
				response.setHeader("Content-type", "text/html;charset=UTF-8");
				response.getWriter().write("<script>alert('弹出，超2000');window.close()</script>");
			} catch (IOException e) {
				e.printStackTrace();
			}
			return;
		}
		Map map = PageUtil.getPageMap(1, count);
		map.putAll(maps);
		orderInfoList = orderInfoService.selectTransfer(map);
		if(null != orderInfoList && orderInfoList.size()> 0){
			for(int i = 0;i<orderInfoList.size();i++){
				OrderInfo info = new OrderInfo();
				info = orderInfoList.get(i);
				String cardType = info.getCardType();
				if(null != cardType && "1".equals(cardType)) {
					info.setCardType("借记卡");
				}else if(null != cardType && "2".equals(cardType)){
					info.setCardType("信用卡");
				}else if(null != cardType && "3".equals(cardType)){
					info.setCardType("准贷记卡");
				}else if(null != cardType && "4".equals(cardType)){
					info.setCardType("储值卡");
				}else {
					info.setCardType("未知");
				}
			}
		}
		//设置下载类型
		response.setContentType("application/x-download");
		String sheetName = "转账交易";//文件名
		//设置导出字段  其中map中的key必须与实体类中的字段一致，不区分大小写
		Map<String, String> mapfile = new LinkedHashMap<String, String>();
		mapfile.put("orderId", "订单号");
		mapfile.put("subMerId", "商户号");
		mapfile.put("shortName", "商户简称");
		mapfile.put("merOrderId", "商户订单号");
		mapfile.put("merOrderTime", "商户订单时间");
		mapfile.put("merAmt", "交易金额");
		mapfile.put("transTypes", "交易类型");
		mapfile.put("orderStatuss", "交易状态");
		mapfile.put("respDesc", "返回码描述");
		mapfile.put("cardNo", "卡号");
		mapfile.put("cardType", "卡类型");
		
		try {
			response.setHeader("Content-Disposition", "attachment;filename="
					+ URLEncoder.encode(sheetName, "UTF-8") + ".xls");
			ImportExcelFile.ImportExcel(orderInfoList, response.getOutputStream(), mapfile, sheetName, null);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public String getOrderList() {
		return orderList;
	}

	public void setOrderList(String orderList) {
		this.orderList = orderList;
	}

	public OrderInfo getOrderInfo() {
		return orderInfo;
	}

	public void setOrderInfo(OrderInfo orderInfo) {
		this.orderInfo = orderInfo;
	}

	public String getBusMerId() {
		return busMerId;
	}

	public void setBusMerId(String busMerId) {
		this.busMerId = busMerId;
	}

	public String getOrderId() {
		return orderId;
	}

	public void setOrderId(String orderId) {
		this.orderId = orderId;
	}

	public String getMerOrderId() {
		return merOrderId;
	}

	public void setMerOrderId(String merOrderId) {
		this.merOrderId = merOrderId;
	}

	public String getUserMobile() {
		return userMobile;
	}

	public void setUserMobile(String userMobile) {
		this.userMobile = userMobile;
	}

	public String getSettleDate() {
		return settleDate;
	}

	public void setSettleDate(String settleDate) {
		this.settleDate = settleDate;
	}

	public String getMerOrderTime() {
		return merOrderTime;
	}

	public void setMerOrderTime(String merOrderTime) {
		this.merOrderTime = merOrderTime;
	}

	public String getTransQid() {
		return transQid;
	}

	public void setTransQid(String transQid) {
		this.transQid = transQid;
	}

	public String getTransType() {
		return transType;
	}

	public void setTransType(String transType) {
		this.transType = transType;
	}

	public String getOrderStatus() {
		return orderStatus;
	}

	public void setOrderStatus(String orderStatus) {
		this.orderStatus = orderStatus;
	}


	public String getAgentIdL1() {
		return agentIdL1;
	}

	public void setAgentIdL1(String agentIdL1) {
		this.agentIdL1 = agentIdL1;
	}

	public String getAgentIdL2() {
		return agentIdL2;
	}

	public void setAgentIdL2(String agentIdL2) {
		this.agentIdL2 = agentIdL2;
	}

	public String getTerminalId() {
		return terminalId;
	}

	public void setTerminalId(String terminalId) {
		this.terminalId = terminalId;
	}

	public String getMerSysId() {
		return merSysId;
	}

	public void setMerSysId(String merSysId) {
		this.merSysId = merSysId;
	}

	public String getCardNo() {
		return cardNo;
	}

	public void setCardNo(String cardNo) {
		this.cardNo = cardNo;
	}

	public String getTerminalSerialNumber() {
		return terminalSerialNumber;
	}

	public void setTerminalSerialNumber(String terminalSerialNumber) {
		this.terminalSerialNumber = terminalSerialNumber;
	}

	public String getStartTime() {
		return startTime;
	}

	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}

	public String getEndTime() {
		return endTime;
	}

	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public String getBusType() {
		return busType;
	}

	public void setBusType(String busType) {
		this.busType = busType;
	}

	public String getShipmentStatus() {
		return shipmentStatus;
	}

	public void setShipmentStatus(String shipmentStatus) {
		this.shipmentStatus = shipmentStatus;
	}
	
	public SysManager getSysManager() {
		return sysManager;
	}

	public void setSysManager(SysManager sysManager) {
		this.sysManager = sysManager;
	}

	public OrderInfo getOrderDetailInfo() {
		return orderDetailInfo;
	}

	public void setOrderDetailInfo(OrderInfo orderDetailInfo) {
		this.orderDetailInfo = orderDetailInfo;
	}

	public String getRefundStatus() {
		return refundStatus;
	}

	public void setRefundStatus(String refundStatus) {
		this.refundStatus = refundStatus;
	}

	public String getOrderSign() {
		return orderSign;
	}

	public void setOrderSign(String orderSign) {
		this.orderSign = orderSign;
	}
	public SysOpLogDao getSysOpLogDao() {
		return sysOpLogDao;
	}
	public void setSysOpLogDao(SysOpLogDao sysOpLogDao) {
		this.sysOpLogDao = sysOpLogDao;
	}
	public SysManagerService getSysManagerService() {
		return sysManagerService;
	}
	public void setSysManagerService(SysManagerService sysManagerService) {
		this.sysManagerService = sysManagerService;
	}
	public OrderInfoService getOrderInfoService() {
		return orderInfoService;
	}
	public void setOrderInfoService(OrderInfoService orderInfoService) {
		this.orderInfoService = orderInfoService;
	}
	public OrderStatictisDao getOrderStatictisDao() {
		return orderStatictisDao;
	}
	public void setOrderStatictisDao(OrderStatictisDao orderStatictisDao) {
		this.orderStatictisDao = orderStatictisDao;
	}
	public SubMerInfoDao getSubMerInfoDao() {
		return subMerInfoDao;
	}
	public void setSubMerInfoDao(SubMerInfoDao subMerInfoDao) {
		this.subMerInfoDao = subMerInfoDao;
	}
	public OrderFrozenDao getOrderFrozenDao() {
		return orderFrozenDao;
	}
	public void setOrderFrozenDao(OrderFrozenDao orderFrozenDao) {
		this.orderFrozenDao = orderFrozenDao;
	}
	public List<OrderInfo> getOrderInfoList() {
		return orderInfoList;
	}
	public void setOrderInfoList(List<OrderInfo> orderInfoList) {
		this.orderInfoList = orderInfoList;
	}
	public OrderFrozen getOrderFrozen() {
		return orderFrozen;
	}
	public void setOrderFrozen(OrderFrozen orderFrozen) {
		this.orderFrozen = orderFrozen;
	}
	public Map getTotalMap() {
		return totalMap;
	}
	public void setTotalMap(Map totalMap) {
		this.totalMap = totalMap;
	}
	public static ResourceBundle getRb() {
		return rb;
	}
	public static void setRb(ResourceBundle rb) {
		OrderInfoAction.rb = rb;
	}
	public OrderProfitDao getOrderProfitDao() {
		return orderProfitDao;
	}
	public void setOrderProfitDao(OrderProfitDao orderProfitDao) {
		this.orderProfitDao = orderProfitDao;
	}
	public OrderProfit getOrderProfit() {
		return orderProfit;
	}
	public void setOrderProfit(OrderProfit orderProfit) {
		this.orderProfit = orderProfit;
	}
	public SubMerInfoService getSubMerInfoService() {
		return subMerInfoService;
	}
	public void setSubMerInfoService(SubMerInfoService subMerInfoService) {
		this.subMerInfoService = subMerInfoService;
	}
	public TractInfoService getTractInfoService() { 
		return tractInfoService;
	}
	public void setTractInfoService(TractInfoService tractInfoService) {
		this.tractInfoService = tractInfoService;
	}

	
}
